confirm = input("Would you like to start the game? Y/N: ")

if confirm.upper() == "Y":
    print("Starting the game!")
else:
    exit()

import pygame
import pymunk
import pymunk.pygame_util

# Initialize Pygame
pygame.init()
screen_size = 800, 600
screen = pygame.display.set_mode(screen_size)
pygame.display.set_caption("Angry Bird Design")
clock = pygame.time.Clock()
FPS = 60
score=0
attempts=3
gameover=False 

# Pymunk space setup
space = pymunk.Space()
space.gravity = (0, 900)
draw_options = pymunk.pygame_util.DrawOptions(screen)

# Load and resize images 
"Background image"
background_image = pygame.image.load("angry_birds_background.jpg").convert_alpha()
background_image = pygame.transform.scale(background_image, screen_size)
"Bird image"
bird_image = pygame.image.load("angry_bird_image.png").convert_alpha()
image_new_size = (40, 40)
bird_image = pygame.transform.scale(bird_image, image_new_size)
"Brick image"
brick_image = pygame.image.load("brick_image.png")
brick_image = pygame.transform.scale(brick_image, image_new_size)
"Pig image"
pig_image = pygame.image.load("pig_image.png")
pig_image = pygame.transform.scale(pig_image, image_new_size)

# Sounds
"Game sound effects"
victory_sound=pygame.mixer.Sound("victory_sound_angry_birds.mp3")
lose_sound=pygame.mixer.Sound("lose_sound_angry_birds.mp3")
launch_sound=pygame.mixer.Sound("launch_sound_angry_birds.mp3")
hit_sound=pygame.mixer.Sound("hit_sound_angry_birds.mp3")
"Background music"
background_music=pygame.mixer.Sound("background_music_angry_birds.mp3")
background_music.play()

# Ground
ground_body = pymunk.Body(body_type=pymunk.Body.STATIC)
ground_shape = pymunk.Segment(ground_body, (0, 580), (800, 580), 5)
ground_shape.friction = 1.0
ground_shape.elasticity = 0.8
space.add(ground_body, ground_shape)

# Bird
def create_bird(x, y):
    body = pymunk.Body(1, pymunk.moment_for_circle(1, 0, 20))
    body.position = x, y
    shape = pymunk.Circle(body, 20)
    shape.elasticity = 0.8
    shape.friction = 0.5
    space.add(body, shape)
    return body, shape

bird_body, bird_shape = create_bird(150, 500)

# Create the block
def create_block(x, y):
    body = pymunk.Body(1, pymunk.moment_for_box(1, (60, 60)))
    body.position = (x, y)
    shape = pymunk.Poly.create_box(body, (60, 60))
    shape.elasticity = 0.4
    shape.friction = 0.6
    space.add(body, shape)
    return body, shape

blocks = [create_block(600, 520), create_block(660, 520), create_block(720, 520), create_block(660, 480), create_block(690, 480), create_block(680, 440)]

# Create the pigs
def create_pigs(x, y):
    body = pymunk.Body(1, pymunk.moment_for_circle(1, 0, 20))
    body.position = x, y
    shape = pymunk.Circle(body, 20)
    shape.elasticity = 0.4
    shape.friction = 0.6
    space.add(body, shape)
    return body, shape

pigs = [create_pigs(650, 520),create_pigs(710, 520),create_pigs(670, 480)]

#
# Draw everything
def draw_objects():
    screen.blit(background_image, (0, 0))  # Background image
    "Draw the bird"
    bird_pos = bird_body.position
    screen.blit(bird_image, (bird_pos.x - 20, bird_pos.y - 20))
    "Draw the line"
    pygame.draw.line(screen, (0, 0, 0), (0, 580), (800, 580), 5)
    "Draw the blocks with a rotation"
    for body, shape in blocks:
        block_pos = body.position
        angle = body.angle  
        rotated_brick = pygame.transform.rotate(brick_image, angle * (180 / 3.14159))
        rect = rotated_brick.get_rect(center=(block_pos.x, block_pos.y))
        screen.blit(rotated_brick, rect)
    "Draw the pigs"
    for body, shape in pigs:
        pig_pos = body.position
        if pig_pos.x > 800:
            space.remove(body, shape)
            pigs.remove((body, shape))
        else:
            screen.blit(pig_image, (pig_pos.x - 20, pig_pos.y - 20))
            pass

# Main loop
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.MOUSEBUTTONDOWN:
            mouse_pos = pygame.mouse.get_pos()
            bird_body.position = 150, 500
            bird_body.velocity = ((mouse_pos[0] - 150) * 4, (500 - mouse_pos[1]) * 4)

    draw_objects()
    space.step(1 / FPS)
    pygame.display.flip()
    clock.tick(FPS)

pygame.quit()
